//
// Copyright (c) 2018-2020 Bahtiar `kalkin-` Gadimov.
//
// This file is part of file-expert
// (see https://github.com/kalkin/file-expert).
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.
//
use lazy_static::lazy_static;
use std::collections::HashMap;

lazy_static! {
    pub static ref MODELINE_ALIASES: HashMap<String, String> = [
        ("1c enterprise".to_owned(), "1C Enterprise".to_owned()),
        ("4d".to_owned(), "4D".to_owned()),
        ("abap".to_owned(), "ABAP".to_owned()),
        ("abap cds".to_owned(), "ABAP CDS".to_owned()),
        ("abnf".to_owned(), "ABNF".to_owned()),
        ("ags script".to_owned(), "AGS Script".to_owned()),
        ("ags".to_owned(), "AGS Script".to_owned()),
        ("aidl".to_owned(), "AIDL".to_owned()),
        ("al".to_owned(), "AL".to_owned()),
        ("ampl".to_owned(), "AMPL".to_owned()),
        ("antlr".to_owned(), "ANTLR".to_owned()),
        ("api blueprint".to_owned(), "API Blueprint".to_owned()),
        ("apl".to_owned(), "APL".to_owned()),
        ("asl".to_owned(), "ASL".to_owned()),
        ("asn.1".to_owned(), "ASN.1".to_owned()),
        ("asp.net".to_owned(), "ASP.NET".to_owned()),
        ("aspx".to_owned(), "ASP.NET".to_owned()),
        ("aspx-vb".to_owned(), "ASP.NET".to_owned()),
        ("ats".to_owned(), "ATS".to_owned()),
        ("ats2".to_owned(), "ATS".to_owned()),
        ("actionscript".to_owned(), "ActionScript".to_owned()),
        ("actionscript 3".to_owned(), "ActionScript".to_owned()),
        ("actionscript3".to_owned(), "ActionScript".to_owned()),
        ("as3".to_owned(), "ActionScript".to_owned()),
        ("ada".to_owned(), "Ada".to_owned()),
        ("ada95".to_owned(), "Ada".to_owned()),
        ("ada2005".to_owned(), "Ada".to_owned()),
        (
            "adobe font metrics".to_owned(),
            "Adobe Font Metrics".to_owned()
        ),
        ("acfm".to_owned(), "Adobe Font Metrics".to_owned()),
        (
            "adobe composite font metrics".to_owned(),
            "Adobe Font Metrics".to_owned()
        ),
        (
            "adobe multiple font metrics".to_owned(),
            "Adobe Font Metrics".to_owned()
        ),
        ("amfm".to_owned(), "Adobe Font Metrics".to_owned()),
        ("agda".to_owned(), "Agda".to_owned()),
        ("alloy".to_owned(), "Alloy".to_owned()),
        ("alpine abuild".to_owned(), "Alpine Abuild".to_owned()),
        ("abuild".to_owned(), "Alpine Abuild".to_owned()),
        ("apkbuild".to_owned(), "Alpine Abuild".to_owned()),
        ("altium designer".to_owned(), "Altium Designer".to_owned()),
        ("altium".to_owned(), "Altium Designer".to_owned()),
        ("angelscript".to_owned(), "AngelScript".to_owned()),
        ("ant build system".to_owned(), "Ant Build System".to_owned()),
        ("apacheconf".to_owned(), "ApacheConf".to_owned()),
        ("aconf".to_owned(), "ApacheConf".to_owned()),
        ("apache".to_owned(), "ApacheConf".to_owned()),
        ("apex".to_owned(), "Apex".to_owned()),
        (
            "apollo guidance computer".to_owned(),
            "Apollo Guidance Computer".to_owned()
        ),
        ("applescript".to_owned(), "AppleScript".to_owned()),
        ("osascript".to_owned(), "AppleScript".to_owned()),
        ("arc".to_owned(), "Arc".to_owned()),
        ("asciidoc".to_owned(), "AsciiDoc".to_owned()),
        ("aspectj".to_owned(), "AspectJ".to_owned()),
        ("assembly".to_owned(), "Assembly".to_owned()),
        ("asm".to_owned(), "Assembly".to_owned()),
        ("nasm".to_owned(), "Assembly".to_owned()),
        ("astro".to_owned(), "Astro".to_owned()),
        ("asymptote".to_owned(), "Asymptote".to_owned()),
        ("augeas".to_owned(), "Augeas".to_owned()),
        ("autohotkey".to_owned(), "AutoHotkey".to_owned()),
        ("ahk".to_owned(), "AutoHotkey".to_owned()),
        ("autoit".to_owned(), "AutoIt".to_owned()),
        ("au3".to_owned(), "AutoIt".to_owned()),
        ("AutoIt3".to_owned(), "AutoIt".to_owned()),
        ("AutoItScript".to_owned(), "AutoIt".to_owned()),
        ("avro idl".to_owned(), "Avro IDL".to_owned()),
        ("awk".to_owned(), "Awk".to_owned()),
        ("basic".to_owned(), "BASIC".to_owned()),
        ("ballerina".to_owned(), "Ballerina".to_owned()),
        ("batchfile".to_owned(), "Batchfile".to_owned()),
        ("bat".to_owned(), "Batchfile".to_owned()),
        ("batch".to_owned(), "Batchfile".to_owned()),
        ("dosbatch".to_owned(), "Batchfile".to_owned()),
        ("winbatch".to_owned(), "Batchfile".to_owned()),
        ("beef".to_owned(), "Beef".to_owned()),
        ("befunge".to_owned(), "Befunge".to_owned()),
        ("bibtex".to_owned(), "BibTeX".to_owned()),
        ("bicep".to_owned(), "Bicep".to_owned()),
        ("bison".to_owned(), "Bison".to_owned()),
        ("bitbake".to_owned(), "BitBake".to_owned()),
        ("blade".to_owned(), "Blade".to_owned()),
        ("blitzbasic".to_owned(), "BlitzBasic".to_owned()),
        ("b3d".to_owned(), "BlitzBasic".to_owned()),
        ("blitz3d".to_owned(), "BlitzBasic".to_owned()),
        ("blitzplus".to_owned(), "BlitzBasic".to_owned()),
        ("bplus".to_owned(), "BlitzBasic".to_owned()),
        ("blitzmax".to_owned(), "BlitzMax".to_owned()),
        ("bmax".to_owned(), "BlitzMax".to_owned()),
        ("bluespec".to_owned(), "Bluespec".to_owned()),
        ("boo".to_owned(), "Boo".to_owned()),
        ("boogie".to_owned(), "Boogie".to_owned()),
        ("brainfuck".to_owned(), "Brainfuck".to_owned()),
        ("brightscript".to_owned(), "Brightscript".to_owned()),
        ("browserslist".to_owned(), "Browserslist".to_owned()),
        ("c".to_owned(), "C".to_owned()),
        ("c#".to_owned(), "C#".to_owned()),
        ("csharp".to_owned(), "C#".to_owned()),
        ("cake".to_owned(), "C#".to_owned()),
        ("cakescript".to_owned(), "C#".to_owned()),
        ("c++".to_owned(), "C++".to_owned()),
        ("cpp".to_owned(), "C++".to_owned()),
        ("c-objdump".to_owned(), "C-ObjDump".to_owned()),
        ("c2hs haskell".to_owned(), "C2hs Haskell".to_owned()),
        ("c2hs".to_owned(), "C2hs Haskell".to_owned()),
        ("cil".to_owned(), "CIL".to_owned()),
        ("clips".to_owned(), "CLIPS".to_owned()),
        ("cmake".to_owned(), "CMake".to_owned()),
        ("cobol".to_owned(), "COBOL".to_owned()),
        ("codeowners".to_owned(), "CODEOWNERS".to_owned()),
        ("collada".to_owned(), "COLLADA".to_owned()),
        ("cson".to_owned(), "CSON".to_owned()),
        ("css".to_owned(), "CSS".to_owned()),
        ("csv".to_owned(), "CSV".to_owned()),
        ("cue".to_owned(), "CUE".to_owned()),
        ("cweb".to_owned(), "CWeb".to_owned()),
        ("cabal config".to_owned(), "Cabal Config".to_owned()),
        ("Cabal".to_owned(), "Cabal Config".to_owned()),
        ("cap'n proto".to_owned(), "Cap'n Proto".to_owned()),
        ("cartocss".to_owned(), "CartoCSS".to_owned()),
        ("Carto".to_owned(), "CartoCSS".to_owned()),
        ("ceylon".to_owned(), "Ceylon".to_owned()),
        ("chapel".to_owned(), "Chapel".to_owned()),
        ("chpl".to_owned(), "Chapel".to_owned()),
        ("charity".to_owned(), "Charity".to_owned()),
        ("chuck".to_owned(), "ChucK".to_owned()),
        ("cirru".to_owned(), "Cirru".to_owned()),
        ("clarion".to_owned(), "Clarion".to_owned()),
        ("clarity".to_owned(), "Clarity".to_owned()),
        ("classic asp".to_owned(), "Classic ASP".to_owned()),
        ("asp".to_owned(), "Classic ASP".to_owned()),
        ("clean".to_owned(), "Clean".to_owned()),
        ("click".to_owned(), "Click".to_owned()),
        ("clojure".to_owned(), "Clojure".to_owned()),
        (
            "closure templates".to_owned(),
            "Closure Templates".to_owned()
        ),
        ("soy".to_owned(), "Closure Templates".to_owned()),
        (
            "cloud firestore security rules".to_owned(),
            "Cloud Firestore Security Rules".to_owned()
        ),
        ("conll-u".to_owned(), "CoNLL-U".to_owned()),
        ("CoNLL".to_owned(), "CoNLL-U".to_owned()),
        ("CoNLL-X".to_owned(), "CoNLL-U".to_owned()),
        ("codeql".to_owned(), "CodeQL".to_owned()),
        ("ql".to_owned(), "CodeQL".to_owned()),
        ("coffeescript".to_owned(), "CoffeeScript".to_owned()),
        ("coffee".to_owned(), "CoffeeScript".to_owned()),
        ("coffee-script".to_owned(), "CoffeeScript".to_owned()),
        ("coldfusion".to_owned(), "ColdFusion".to_owned()),
        ("cfm".to_owned(), "ColdFusion".to_owned()),
        ("cfml".to_owned(), "ColdFusion".to_owned()),
        ("coldfusion html".to_owned(), "ColdFusion".to_owned()),
        ("coldfusion cfc".to_owned(), "ColdFusion CFC".to_owned()),
        ("cfc".to_owned(), "ColdFusion CFC".to_owned()),
        ("common lisp".to_owned(), "Common Lisp".to_owned()),
        ("lisp".to_owned(), "Common Lisp".to_owned()),
        (
            "common workflow language".to_owned(),
            "Common Workflow Language".to_owned()
        ),
        ("cwl".to_owned(), "Common Workflow Language".to_owned()),
        ("component pascal".to_owned(), "Component Pascal".to_owned()),
        ("cool".to_owned(), "Cool".to_owned()),
        ("coq".to_owned(), "Coq".to_owned()),
        ("cpp-objdump".to_owned(), "Cpp-ObjDump".to_owned()),
        ("c++-objdump".to_owned(), "Cpp-ObjDump".to_owned()),
        ("creole".to_owned(), "Creole".to_owned()),
        ("crystal".to_owned(), "Crystal".to_owned()),
        ("csound".to_owned(), "Csound".to_owned()),
        ("csound-orc".to_owned(), "Csound".to_owned()),
        ("csound document".to_owned(), "Csound Document".to_owned()),
        ("csound-csd".to_owned(), "Csound Document".to_owned()),
        ("csound score".to_owned(), "Csound Score".to_owned()),
        ("csound-sco".to_owned(), "Csound Score".to_owned()),
        ("cuda".to_owned(), "Cuda".to_owned()),
        ("cue sheet".to_owned(), "Cue Sheet".to_owned()),
        ("curry".to_owned(), "Curry".to_owned()),
        ("cycript".to_owned(), "Cycript".to_owned()),
        ("cython".to_owned(), "Cython".to_owned()),
        ("pyrex".to_owned(), "Cython".to_owned()),
        ("d".to_owned(), "D".to_owned()),
        ("Dlang".to_owned(), "D".to_owned()),
        ("d-objdump".to_owned(), "D-ObjDump".to_owned()),
        (
            "digital command language".to_owned(),
            "DIGITAL Command Language".to_owned()
        ),
        ("dcl".to_owned(), "DIGITAL Command Language".to_owned()),
        ("dm".to_owned(), "DM".to_owned()),
        ("byond".to_owned(), "DM".to_owned()),
        ("dns zone".to_owned(), "DNS Zone".to_owned()),
        ("dtrace".to_owned(), "DTrace".to_owned()),
        ("dtrace-script".to_owned(), "DTrace".to_owned()),
        ("dafny".to_owned(), "Dafny".to_owned()),
        ("darcs patch".to_owned(), "Darcs Patch".to_owned()),
        ("dpatch".to_owned(), "Darcs Patch".to_owned()),
        ("dart".to_owned(), "Dart".to_owned()),
        ("dataweave".to_owned(), "DataWeave".to_owned()),
        ("dhall".to_owned(), "Dhall".to_owned()),
        ("diff".to_owned(), "Diff".to_owned()),
        ("udiff".to_owned(), "Diff".to_owned()),
        ("directx 3d file".to_owned(), "DirectX 3D File".to_owned()),
        ("dockerfile".to_owned(), "Dockerfile".to_owned()),
        ("Containerfile".to_owned(), "Dockerfile".to_owned()),
        ("dogescript".to_owned(), "Dogescript".to_owned()),
        ("dylan".to_owned(), "Dylan".to_owned()),
        ("e".to_owned(), "E".to_owned()),
        ("e-mail".to_owned(), "E-mail".to_owned()),
        ("email".to_owned(), "E-mail".to_owned()),
        ("eml".to_owned(), "E-mail".to_owned()),
        ("mail".to_owned(), "E-mail".to_owned()),
        ("mbox".to_owned(), "E-mail".to_owned()),
        ("ebnf".to_owned(), "EBNF".to_owned()),
        ("ecl".to_owned(), "ECL".to_owned()),
        ("eclipse".to_owned(), "ECLiPSe".to_owned()),
        ("ejs".to_owned(), "EJS".to_owned()),
        ("eq".to_owned(), "EQ".to_owned()),
        ("eagle".to_owned(), "Eagle".to_owned()),
        ("earthly".to_owned(), "Earthly".to_owned()),
        ("Earthfile".to_owned(), "Earthly".to_owned()),
        ("easybuild".to_owned(), "Easybuild".to_owned()),
        ("ecere projects".to_owned(), "Ecere Projects".to_owned()),
        ("editorconfig".to_owned(), "EditorConfig".to_owned()),
        ("editor-config".to_owned(), "EditorConfig".to_owned()),
        (
            "edje data collection".to_owned(),
            "Edje Data Collection".to_owned()
        ),
        ("eiffel".to_owned(), "Eiffel".to_owned()),
        ("elixir".to_owned(), "Elixir".to_owned()),
        ("elm".to_owned(), "Elm".to_owned()),
        ("emacs lisp".to_owned(), "Emacs Lisp".to_owned()),
        ("elisp".to_owned(), "Emacs Lisp".to_owned()),
        ("emacs".to_owned(), "Emacs Lisp".to_owned()),
        ("emberscript".to_owned(), "EmberScript".to_owned()),
        ("erlang".to_owned(), "Erlang".to_owned()),
        ("f#".to_owned(), "F#".to_owned()),
        ("fsharp".to_owned(), "F#".to_owned()),
        ("f*".to_owned(), "F*".to_owned()),
        ("fstar".to_owned(), "F*".to_owned()),
        ("figlet font".to_owned(), "FIGlet Font".to_owned()),
        ("FIGfont".to_owned(), "FIGlet Font".to_owned()),
        ("flux".to_owned(), "FLUX".to_owned()),
        ("factor".to_owned(), "Factor".to_owned()),
        ("fancy".to_owned(), "Fancy".to_owned()),
        ("fantom".to_owned(), "Fantom".to_owned()),
        ("faust".to_owned(), "Faust".to_owned()),
        ("fennel".to_owned(), "Fennel".to_owned()),
        ("filebench wml".to_owned(), "Filebench WML".to_owned()),
        ("filterscript".to_owned(), "Filterscript".to_owned()),
        ("fluent".to_owned(), "Fluent".to_owned()),
        ("formatted".to_owned(), "Formatted".to_owned()),
        ("forth".to_owned(), "Forth".to_owned()),
        ("fortran".to_owned(), "Fortran".to_owned()),
        (
            "fortran free form".to_owned(),
            "Fortran Free Form".to_owned()
        ),
        ("freebasic".to_owned(), "FreeBasic".to_owned()),
        ("fb".to_owned(), "FreeBasic".to_owned()),
        ("freemarker".to_owned(), "FreeMarker".to_owned()),
        ("ftl".to_owned(), "FreeMarker".to_owned()),
        ("frege".to_owned(), "Frege".to_owned()),
        ("futhark".to_owned(), "Futhark".to_owned()),
        ("g-code".to_owned(), "G-code".to_owned()),
        ("gaml".to_owned(), "GAML".to_owned()),
        ("gams".to_owned(), "GAMS".to_owned()),
        ("gap".to_owned(), "GAP".to_owned()),
        (
            "gcc machine description".to_owned(),
            "GCC Machine Description".to_owned()
        ),
        ("gdb".to_owned(), "GDB".to_owned()),
        ("gdscript".to_owned(), "GDScript".to_owned()),
        ("gedcom".to_owned(), "GEDCOM".to_owned()),
        ("glsl".to_owned(), "GLSL".to_owned()),
        ("gn".to_owned(), "GN".to_owned()),
        ("gsc".to_owned(), "GSC".to_owned()),
        (
            "game maker language".to_owned(),
            "Game Maker Language".to_owned()
        ),
        ("gemfile.lock".to_owned(), "Gemfile.lock".to_owned()),
        ("genie".to_owned(), "Genie".to_owned()),
        ("genshi".to_owned(), "Genshi".to_owned()),
        ("xml+genshi".to_owned(), "Genshi".to_owned()),
        ("xml+kid".to_owned(), "Genshi".to_owned()),
        ("gentoo ebuild".to_owned(), "Gentoo Ebuild".to_owned()),
        ("gentoo eclass".to_owned(), "Gentoo Eclass".to_owned()),
        ("gerber image".to_owned(), "Gerber Image".to_owned()),
        ("rs-274x".to_owned(), "Gerber Image".to_owned()),
        ("gettext catalog".to_owned(), "Gettext Catalog".to_owned()),
        ("pot".to_owned(), "Gettext Catalog".to_owned()),
        ("gherkin".to_owned(), "Gherkin".to_owned()),
        ("cucumber".to_owned(), "Gherkin".to_owned()),
        ("git attributes".to_owned(), "Git Attributes".to_owned()),
        ("gitattributes".to_owned(), "Git Attributes".to_owned()),
        ("git config".to_owned(), "Git Config".to_owned()),
        ("gitconfig".to_owned(), "Git Config".to_owned()),
        ("gitmodules".to_owned(), "Git Config".to_owned()),
        ("gleam".to_owned(), "Gleam".to_owned()),
        ("glyph".to_owned(), "Glyph".to_owned()),
        (
            "glyph bitmap distribution format".to_owned(),
            "Glyph Bitmap Distribution Format".to_owned()
        ),
        (
            "gnat project manager".to_owned(),
            "GNAT Project Manager".to_owned()
        ),
        ("gnuplot".to_owned(), "Gnuplot".to_owned()),
        ("go".to_owned(), "Go".to_owned()),
        ("golang".to_owned(), "Go".to_owned()),
        ("go checksums".to_owned(), "Go Checksums".to_owned()),
        ("go.sum".to_owned(), "Go Checksums".to_owned()),
        ("go sum".to_owned(), "Go Checksums".to_owned()),
        ("go module".to_owned(), "Go Module".to_owned()),
        ("go.mod".to_owned(), "Go Module".to_owned()),
        ("go mod".to_owned(), "Go Module".to_owned()),
        ("golo".to_owned(), "Golo".to_owned()),
        ("gosu".to_owned(), "Gosu".to_owned()),
        ("grace".to_owned(), "Grace".to_owned()),
        ("gradle".to_owned(), "Gradle".to_owned()),
        (
            "grammatical framework".to_owned(),
            "Grammatical Framework".to_owned()
        ),
        ("gf".to_owned(), "Grammatical Framework".to_owned()),
        (
            "graph modeling language".to_owned(),
            "Graph Modeling Language".to_owned()
        ),
        ("graphql".to_owned(), "GraphQL".to_owned()),
        ("graphviz (dot)".to_owned(), "Graphviz (DOT)".to_owned()),
        ("groovy".to_owned(), "Groovy".to_owned()),
        (
            "groovy server pages".to_owned(),
            "Groovy Server Pages".to_owned()
        ),
        ("gsp".to_owned(), "Groovy Server Pages".to_owned()),
        (
            "java server page".to_owned(),
            "Groovy Server Pages".to_owned()
        ),
        ("haproxy".to_owned(), "HAProxy".to_owned()),
        ("hcl".to_owned(), "HCL".to_owned()),
        (
            "HashiCorp Configuration Language".to_owned(),
            "HCL".to_owned()
        ),
        ("terraform".to_owned(), "HCL".to_owned()),
        ("hlsl".to_owned(), "HLSL".to_owned()),
        ("html".to_owned(), "HTML".to_owned()),
        ("xhtml".to_owned(), "HTML".to_owned()),
        ("html+ecr".to_owned(), "HTML+ECR".to_owned()),
        ("ecr".to_owned(), "HTML+ECR".to_owned()),
        ("html+eex".to_owned(), "HTML+EEX".to_owned()),
        ("eex".to_owned(), "HTML+EEX".to_owned()),
        ("heex".to_owned(), "HTML+EEX".to_owned()),
        ("leex".to_owned(), "HTML+EEX".to_owned()),
        ("html+erb".to_owned(), "HTML+ERB".to_owned()),
        ("erb".to_owned(), "HTML+ERB".to_owned()),
        ("rhtml".to_owned(), "HTML+ERB".to_owned()),
        ("html+ruby".to_owned(), "HTML+ERB".to_owned()),
        ("html+php".to_owned(), "HTML+PHP".to_owned()),
        ("html+razor".to_owned(), "HTML+Razor".to_owned()),
        ("razor".to_owned(), "HTML+Razor".to_owned()),
        ("http".to_owned(), "HTTP".to_owned()),
        ("hxml".to_owned(), "HXML".to_owned()),
        ("hack".to_owned(), "Hack".to_owned()),
        ("haml".to_owned(), "Haml".to_owned()),
        ("handlebars".to_owned(), "Handlebars".to_owned()),
        ("hbs".to_owned(), "Handlebars".to_owned()),
        ("htmlbars".to_owned(), "Handlebars".to_owned()),
        ("harbour".to_owned(), "Harbour".to_owned()),
        ("haskell".to_owned(), "Haskell".to_owned()),
        ("haxe".to_owned(), "Haxe".to_owned()),
        ("hiveql".to_owned(), "HiveQL".to_owned()),
        ("holyc".to_owned(), "HolyC".to_owned()),
        ("hy".to_owned(), "Hy".to_owned()),
        ("hylang".to_owned(), "Hy".to_owned()),
        ("hyphy".to_owned(), "HyPhy".to_owned()),
        ("idl".to_owned(), "IDL".to_owned()),
        ("igor pro".to_owned(), "IGOR Pro".to_owned()),
        ("igor".to_owned(), "IGOR Pro".to_owned()),
        ("igorpro".to_owned(), "IGOR Pro".to_owned()),
        ("ini".to_owned(), "INI".to_owned()),
        ("dosini".to_owned(), "INI".to_owned()),
        ("irc log".to_owned(), "IRC log".to_owned()),
        ("irc".to_owned(), "IRC log".to_owned()),
        ("irc logs".to_owned(), "IRC log".to_owned()),
        ("idris".to_owned(), "Idris".to_owned()),
        ("ignore list".to_owned(), "Ignore List".to_owned()),
        ("ignore".to_owned(), "Ignore List".to_owned()),
        ("gitignore".to_owned(), "Ignore List".to_owned()),
        ("git-ignore".to_owned(), "Ignore List".to_owned()),
        ("imagej macro".to_owned(), "ImageJ Macro".to_owned()),
        ("ijm".to_owned(), "ImageJ Macro".to_owned()),
        ("inform 7".to_owned(), "Inform 7".to_owned()),
        ("i7".to_owned(), "Inform 7".to_owned()),
        ("inform7".to_owned(), "Inform 7".to_owned()),
        ("inno setup".to_owned(), "Inno Setup".to_owned()),
        ("io".to_owned(), "Io".to_owned()),
        ("ioke".to_owned(), "Ioke".to_owned()),
        ("isabelle".to_owned(), "Isabelle".to_owned()),
        ("isabelle root".to_owned(), "Isabelle ROOT".to_owned()),
        ("j".to_owned(), "J".to_owned()),
        ("jar manifest".to_owned(), "JAR Manifest".to_owned()),
        ("jflex".to_owned(), "JFlex".to_owned()),
        ("json".to_owned(), "JSON".to_owned()),
        (
            "json with comments".to_owned(),
            "JSON with Comments".to_owned()
        ),
        ("jsonc".to_owned(), "JSON with Comments".to_owned()),
        ("json5".to_owned(), "JSON5".to_owned()),
        ("jsonld".to_owned(), "JSONLD".to_owned()),
        ("jsoniq".to_owned(), "JSONiq".to_owned()),
        ("janet".to_owned(), "Janet".to_owned()),
        ("jasmin".to_owned(), "Jasmin".to_owned()),
        ("java".to_owned(), "Java".to_owned()),
        ("java properties".to_owned(), "Java Properties".to_owned()),
        (
            "java server pages".to_owned(),
            "Java Server Pages".to_owned()
        ),
        ("jsp".to_owned(), "Java Server Pages".to_owned()),
        ("javascript".to_owned(), "JavaScript".to_owned()),
        ("js".to_owned(), "JavaScript".to_owned()),
        ("node".to_owned(), "JavaScript".to_owned()),
        ("javascript+erb".to_owned(), "JavaScript+ERB".to_owned()),
        ("jest snapshot".to_owned(), "Jest Snapshot".to_owned()),
        ("jinja".to_owned(), "Jinja".to_owned()),
        ("django".to_owned(), "Jinja".to_owned()),
        ("html+django".to_owned(), "Jinja".to_owned()),
        ("html+jinja".to_owned(), "Jinja".to_owned()),
        ("htmldjango".to_owned(), "Jinja".to_owned()),
        ("jison".to_owned(), "Jison".to_owned()),
        ("jison lex".to_owned(), "Jison Lex".to_owned()),
        ("jolie".to_owned(), "Jolie".to_owned()),
        ("jsonnet".to_owned(), "Jsonnet".to_owned()),
        ("julia".to_owned(), "Julia".to_owned()),
        ("jupyter notebook".to_owned(), "Jupyter Notebook".to_owned()),
        ("IPython Notebook".to_owned(), "Jupyter Notebook".to_owned()),
        ("krl".to_owned(), "KRL".to_owned()),
        ("kaitai struct".to_owned(), "Kaitai Struct".to_owned()),
        ("ksy".to_owned(), "Kaitai Struct".to_owned()),
        ("kakounescript".to_owned(), "KakouneScript".to_owned()),
        ("kak".to_owned(), "KakouneScript".to_owned()),
        ("kakscript".to_owned(), "KakouneScript".to_owned()),
        ("kicad layout".to_owned(), "KiCad Layout".to_owned()),
        ("pcbnew".to_owned(), "KiCad Layout".to_owned()),
        (
            "kicad legacy layout".to_owned(),
            "KiCad Legacy Layout".to_owned()
        ),
        ("kicad schematic".to_owned(), "KiCad Schematic".to_owned()),
        (
            "eeschema schematic".to_owned(),
            "KiCad Schematic".to_owned()
        ),
        ("kit".to_owned(), "Kit".to_owned()),
        ("kotlin".to_owned(), "Kotlin".to_owned()),
        ("kusto".to_owned(), "Kusto".to_owned()),
        ("lfe".to_owned(), "LFE".to_owned()),
        ("llvm".to_owned(), "LLVM".to_owned()),
        ("lolcode".to_owned(), "LOLCODE".to_owned()),
        ("lsl".to_owned(), "LSL".to_owned()),
        ("ltspice symbol".to_owned(), "LTspice Symbol".to_owned()),
        ("labview".to_owned(), "LabVIEW".to_owned()),
        ("lark".to_owned(), "Lark".to_owned()),
        ("lasso".to_owned(), "Lasso".to_owned()),
        ("lassoscript".to_owned(), "Lasso".to_owned()),
        ("latte".to_owned(), "Latte".to_owned()),
        ("lean".to_owned(), "Lean".to_owned()),
        ("less".to_owned(), "Less".to_owned()),
        ("lex".to_owned(), "Lex".to_owned()),
        ("flex".to_owned(), "Lex".to_owned()),
        ("lilypond".to_owned(), "LilyPond".to_owned()),
        ("limbo".to_owned(), "Limbo".to_owned()),
        ("linker script".to_owned(), "Linker Script".to_owned()),
        (
            "linux kernel module".to_owned(),
            "Linux Kernel Module".to_owned()
        ),
        ("liquid".to_owned(), "Liquid".to_owned()),
        ("literate agda".to_owned(), "Literate Agda".to_owned()),
        (
            "literate coffeescript".to_owned(),
            "Literate CoffeeScript".to_owned()
        ),
        ("litcoffee".to_owned(), "Literate CoffeeScript".to_owned()),
        ("literate haskell".to_owned(), "Literate Haskell".to_owned()),
        ("lhaskell".to_owned(), "Literate Haskell".to_owned()),
        ("lhs".to_owned(), "Literate Haskell".to_owned()),
        ("livescript".to_owned(), "LiveScript".to_owned()),
        ("live-script".to_owned(), "LiveScript".to_owned()),
        ("ls".to_owned(), "LiveScript".to_owned()),
        ("logos".to_owned(), "Logos".to_owned()),
        ("logtalk".to_owned(), "Logtalk".to_owned()),
        ("lookml".to_owned(), "LookML".to_owned()),
        ("loomscript".to_owned(), "LoomScript".to_owned()),
        ("lua".to_owned(), "Lua".to_owned()),
        ("m".to_owned(), "M".to_owned()),
        ("mumps".to_owned(), "M".to_owned()),
        ("m4".to_owned(), "M4".to_owned()),
        ("m4sugar".to_owned(), "M4Sugar".to_owned()),
        ("autoconf".to_owned(), "M4Sugar".to_owned()),
        ("matlab".to_owned(), "MATLAB".to_owned()),
        ("octave".to_owned(), "MATLAB".to_owned()),
        ("maxscript".to_owned(), "MAXScript".to_owned()),
        ("mlir".to_owned(), "MLIR".to_owned()),
        ("mql4".to_owned(), "MQL4".to_owned()),
        ("mql5".to_owned(), "MQL5".to_owned()),
        ("mtml".to_owned(), "MTML".to_owned()),
        ("muf".to_owned(), "MUF".to_owned()),
        ("macaulay2".to_owned(), "Macaulay2".to_owned()),
        ("m2".to_owned(), "Macaulay2".to_owned()),
        ("makefile".to_owned(), "Makefile".to_owned()),
        ("bsdmake".to_owned(), "Makefile".to_owned()),
        ("make".to_owned(), "Makefile".to_owned()),
        ("mf".to_owned(), "Makefile".to_owned()),
        ("mako".to_owned(), "Mako".to_owned()),
        ("markdown".to_owned(), "Markdown".to_owned()),
        ("pandoc".to_owned(), "Markdown".to_owned()),
        ("marko".to_owned(), "Marko".to_owned()),
        ("markojs".to_owned(), "Marko".to_owned()),
        ("mask".to_owned(), "Mask".to_owned()),
        ("mathematica".to_owned(), "Mathematica".to_owned()),
        ("mma".to_owned(), "Mathematica".to_owned()),
        ("wolfram".to_owned(), "Mathematica".to_owned()),
        ("wolfram language".to_owned(), "Mathematica".to_owned()),
        ("wolfram lang".to_owned(), "Mathematica".to_owned()),
        ("wl".to_owned(), "Mathematica".to_owned()),
        ("maven pom".to_owned(), "Maven POM".to_owned()),
        ("max".to_owned(), "Max".to_owned()),
        ("max/msp".to_owned(), "Max".to_owned()),
        ("maxmsp".to_owned(), "Max".to_owned()),
        ("mercury".to_owned(), "Mercury".to_owned()),
        ("meson".to_owned(), "Meson".to_owned()),
        ("metal".to_owned(), "Metal".to_owned()),
        (
            "microsoft developer studio project".to_owned(),
            "Microsoft Developer Studio Project".to_owned()
        ),
        (
            "microsoft visual studio solution".to_owned(),
            "Microsoft Visual Studio Solution".to_owned()
        ),
        ("minid".to_owned(), "MiniD".to_owned()),
        ("mint".to_owned(), "Mint".to_owned()),
        ("mirah".to_owned(), "Mirah".to_owned()),
        ("modelica".to_owned(), "Modelica".to_owned()),
        ("modula-2".to_owned(), "Modula-2".to_owned()),
        ("modula-3".to_owned(), "Modula-3".to_owned()),
        (
            "module management system".to_owned(),
            "Module Management System".to_owned()
        ),
        ("monkey".to_owned(), "Monkey".to_owned()),
        ("moocode".to_owned(), "Moocode".to_owned()),
        ("moonscript".to_owned(), "MoonScript".to_owned()),
        ("motoko".to_owned(), "Motoko".to_owned()),
        (
            "motorola 68k assembly".to_owned(),
            "Motorola 68K Assembly".to_owned()
        ),
        ("m68k".to_owned(), "Motorola 68K Assembly".to_owned()),
        ("muse".to_owned(), "Muse".to_owned()),
        ("amusewiki".to_owned(), "Muse".to_owned()),
        ("emacs muse".to_owned(), "Muse".to_owned()),
        ("mustache".to_owned(), "Mustache".to_owned()),
        ("myghty".to_owned(), "Myghty".to_owned()),
        ("nasl".to_owned(), "NASL".to_owned()),
        ("ncl".to_owned(), "NCL".to_owned()),
        ("neon".to_owned(), "NEON".to_owned()),
        ("nette object notation".to_owned(), "NEON".to_owned()),
        ("ne-on".to_owned(), "NEON".to_owned()),
        ("nl".to_owned(), "NL".to_owned()),
        ("npm config".to_owned(), "NPM Config".to_owned()),
        ("npmrc".to_owned(), "NPM Config".to_owned()),
        ("nsis".to_owned(), "NSIS".to_owned()),
        ("nwscript".to_owned(), "NWScript".to_owned()),
        ("nearley".to_owned(), "Nearley".to_owned()),
        ("nemerle".to_owned(), "Nemerle".to_owned()),
        ("netlinx".to_owned(), "NetLinx".to_owned()),
        ("netlinx+erb".to_owned(), "NetLinx+ERB".to_owned()),
        ("netlogo".to_owned(), "NetLogo".to_owned()),
        ("newlisp".to_owned(), "NewLisp".to_owned()),
        ("nextflow".to_owned(), "Nextflow".to_owned()),
        ("nginx".to_owned(), "Nginx".to_owned()),
        ("nginx configuration file".to_owned(), "Nginx".to_owned()),
        ("nim".to_owned(), "Nim".to_owned()),
        ("ninja".to_owned(), "Ninja".to_owned()),
        ("nit".to_owned(), "Nit".to_owned()),
        ("nix".to_owned(), "Nix".to_owned()),
        ("nixos".to_owned(), "Nix".to_owned()),
        ("nu".to_owned(), "Nu".to_owned()),
        ("nush".to_owned(), "Nu".to_owned()),
        ("numpy".to_owned(), "NumPy".to_owned()),
        ("nunjucks".to_owned(), "Nunjucks".to_owned()),
        ("njk".to_owned(), "Nunjucks".to_owned()),
        ("ocaml".to_owned(), "OCaml".to_owned()),
        ("objdump".to_owned(), "ObjDump".to_owned()),
        (
            "object data instance notation".to_owned(),
            "Object Data Instance Notation".to_owned()
        ),
        ("objectscript".to_owned(), "ObjectScript".to_owned()),
        ("objective-c".to_owned(), "Objective-C".to_owned()),
        ("obj-c".to_owned(), "Objective-C".to_owned()),
        ("objc".to_owned(), "Objective-C".to_owned()),
        ("objectivec".to_owned(), "Objective-C".to_owned()),
        ("objective-c++".to_owned(), "Objective-C++".to_owned()),
        ("obj-c++".to_owned(), "Objective-C++".to_owned()),
        ("objc++".to_owned(), "Objective-C++".to_owned()),
        ("objectivec++".to_owned(), "Objective-C++".to_owned()),
        ("objective-j".to_owned(), "Objective-J".to_owned()),
        ("obj-j".to_owned(), "Objective-J".to_owned()),
        ("objectivej".to_owned(), "Objective-J".to_owned()),
        ("objj".to_owned(), "Objective-J".to_owned()),
        ("odin".to_owned(), "Odin".to_owned()),
        ("odinlang".to_owned(), "Odin".to_owned()),
        ("odin-lang".to_owned(), "Odin".to_owned()),
        ("omgrofl".to_owned(), "Omgrofl".to_owned()),
        ("opa".to_owned(), "Opa".to_owned()),
        ("opal".to_owned(), "Opal".to_owned()),
        (
            "open policy agent".to_owned(),
            "Open Policy Agent".to_owned()
        ),
        ("opencl".to_owned(), "OpenCL".to_owned()),
        ("openedge abl".to_owned(), "OpenEdge ABL".to_owned()),
        ("progress".to_owned(), "OpenEdge ABL".to_owned()),
        ("openedge".to_owned(), "OpenEdge ABL".to_owned()),
        ("abl".to_owned(), "OpenEdge ABL".to_owned()),
        ("openqasm".to_owned(), "OpenQASM".to_owned()),
        ("openrc runscript".to_owned(), "OpenRC runscript".to_owned()),
        ("openrc".to_owned(), "OpenRC runscript".to_owned()),
        ("openscad".to_owned(), "OpenSCAD".to_owned()),
        (
            "openstep property list".to_owned(),
            "OpenStep Property List".to_owned()
        ),
        (
            "opentype feature file".to_owned(),
            "OpenType Feature File".to_owned()
        ),
        ("AFDKO".to_owned(), "OpenType Feature File".to_owned()),
        ("org".to_owned(), "Org".to_owned()),
        ("ox".to_owned(), "Ox".to_owned()),
        ("oxygene".to_owned(), "Oxygene".to_owned()),
        ("oz".to_owned(), "Oz".to_owned()),
        ("p4".to_owned(), "P4".to_owned()),
        ("peg.js".to_owned(), "PEG.js".to_owned()),
        ("php".to_owned(), "PHP".to_owned()),
        ("inc".to_owned(), "PHP".to_owned()),
        ("plsql".to_owned(), "PLSQL".to_owned()),
        ("plpgsql".to_owned(), "PLpgSQL".to_owned()),
        ("pov-ray sdl".to_owned(), "POV-Ray SDL".to_owned()),
        ("pov-ray".to_owned(), "POV-Ray SDL".to_owned()),
        ("povray".to_owned(), "POV-Ray SDL".to_owned()),
        ("pan".to_owned(), "Pan".to_owned()),
        ("papyrus".to_owned(), "Papyrus".to_owned()),
        ("parrot".to_owned(), "Parrot".to_owned()),
        ("parrot assembly".to_owned(), "Parrot Assembly".to_owned()),
        ("pasm".to_owned(), "Parrot Assembly".to_owned()),
        (
            "parrot internal representation".to_owned(),
            "Parrot Internal Representation".to_owned()
        ),
        (
            "pir".to_owned(),
            "Parrot Internal Representation".to_owned()
        ),
        ("pascal".to_owned(), "Pascal".to_owned()),
        ("delphi".to_owned(), "Pascal".to_owned()),
        ("objectpascal".to_owned(), "Pascal".to_owned()),
        ("pawn".to_owned(), "Pawn".to_owned()),
        ("pep8".to_owned(), "Pep8".to_owned()),
        ("perl".to_owned(), "Perl".to_owned()),
        ("cperl".to_owned(), "Perl".to_owned()),
        ("pic".to_owned(), "Pic".to_owned()),
        ("pickle".to_owned(), "Pickle".to_owned()),
        ("picolisp".to_owned(), "PicoLisp".to_owned()),
        ("piglatin".to_owned(), "PigLatin".to_owned()),
        ("pike".to_owned(), "Pike".to_owned()),
        ("plantuml".to_owned(), "PlantUML".to_owned()),
        ("pod".to_owned(), "Pod".to_owned()),
        ("pod 6".to_owned(), "Pod 6".to_owned()),
        ("pogoscript".to_owned(), "PogoScript".to_owned()),
        ("pony".to_owned(), "Pony".to_owned()),
        ("postcss".to_owned(), "PostCSS".to_owned()),
        ("postscript".to_owned(), "PostScript".to_owned()),
        ("postscr".to_owned(), "PostScript".to_owned()),
        ("powerbuilder".to_owned(), "PowerBuilder".to_owned()),
        ("powershell".to_owned(), "PowerShell".to_owned()),
        ("posh".to_owned(), "PowerShell".to_owned()),
        ("pwsh".to_owned(), "PowerShell".to_owned()),
        ("prisma".to_owned(), "Prisma".to_owned()),
        ("processing".to_owned(), "Processing".to_owned()),
        ("procfile".to_owned(), "Procfile".to_owned()),
        ("proguard".to_owned(), "Proguard".to_owned()),
        ("prolog".to_owned(), "Prolog".to_owned()),
        ("promela".to_owned(), "Promela".to_owned()),
        ("propeller spin".to_owned(), "Propeller Spin".to_owned()),
        ("protocol buffer".to_owned(), "Protocol Buffer".to_owned()),
        ("protobuf".to_owned(), "Protocol Buffer".to_owned()),
        ("Protocol Buffers".to_owned(), "Protocol Buffer".to_owned()),
        (
            "protocol buffer text format".to_owned(),
            "Protocol Buffer Text Format".to_owned()
        ),
        (
            "text proto".to_owned(),
            "Protocol Buffer Text Format".to_owned()
        ),
        (
            "protobuf text format".to_owned(),
            "Protocol Buffer Text Format".to_owned()
        ),
        ("public key".to_owned(), "Public Key".to_owned()),
        ("pug".to_owned(), "Pug".to_owned()),
        ("puppet".to_owned(), "Puppet".to_owned()),
        ("pure data".to_owned(), "Pure Data".to_owned()),
        ("purebasic".to_owned(), "PureBasic".to_owned()),
        ("purescript".to_owned(), "PureScript".to_owned()),
        ("python".to_owned(), "Python".to_owned()),
        ("python3".to_owned(), "Python".to_owned()),
        ("rusthon".to_owned(), "Python".to_owned()),
        ("python console".to_owned(), "Python console".to_owned()),
        ("pycon".to_owned(), "Python console".to_owned()),
        ("python traceback".to_owned(), "Python traceback".to_owned()),
        ("q#".to_owned(), "Q#".to_owned()),
        ("qsharp".to_owned(), "Q#".to_owned()),
        ("qml".to_owned(), "QML".to_owned()),
        ("qmake".to_owned(), "QMake".to_owned()),
        ("qt script".to_owned(), "Qt Script".to_owned()),
        ("quake".to_owned(), "Quake".to_owned()),
        ("r".to_owned(), "R".to_owned()),
        ("R".to_owned(), "R".to_owned()),
        ("Rscript".to_owned(), "R".to_owned()),
        ("splus".to_owned(), "R".to_owned()),
        ("raml".to_owned(), "RAML".to_owned()),
        ("rdoc".to_owned(), "RDoc".to_owned()),
        ("realbasic".to_owned(), "REALbasic".to_owned()),
        ("rexx".to_owned(), "REXX".to_owned()),
        ("arexx".to_owned(), "REXX".to_owned()),
        ("rmarkdown".to_owned(), "RMarkdown".to_owned()),
        ("rpc".to_owned(), "RPC".to_owned()),
        ("rpcgen".to_owned(), "RPC".to_owned()),
        ("oncrpc".to_owned(), "RPC".to_owned()),
        ("xdr".to_owned(), "RPC".to_owned()),
        ("rpgle".to_owned(), "RPGLE".to_owned()),
        ("ile rpg".to_owned(), "RPGLE".to_owned()),
        ("sqlrpgle".to_owned(), "RPGLE".to_owned()),
        ("rpm spec".to_owned(), "RPM Spec".to_owned()),
        ("specfile".to_owned(), "RPM Spec".to_owned()),
        ("runoff".to_owned(), "RUNOFF".to_owned()),
        ("racket".to_owned(), "Racket".to_owned()),
        ("ragel".to_owned(), "Ragel".to_owned()),
        ("ragel-rb".to_owned(), "Ragel".to_owned()),
        ("ragel-ruby".to_owned(), "Ragel".to_owned()),
        ("raku".to_owned(), "Raku".to_owned()),
        ("perl6".to_owned(), "Raku".to_owned()),
        ("perl-6".to_owned(), "Raku".to_owned()),
        ("rascal".to_owned(), "Rascal".to_owned()),
        ("raw token data".to_owned(), "Raw token data".to_owned()),
        ("raw".to_owned(), "Raw token data".to_owned()),
        ("rescript".to_owned(), "ReScript".to_owned()),
        ("readline config".to_owned(), "Readline Config".to_owned()),
        ("inputrc".to_owned(), "Readline Config".to_owned()),
        ("readline".to_owned(), "Readline Config".to_owned()),
        ("reason".to_owned(), "Reason".to_owned()),
        ("rebol".to_owned(), "Rebol".to_owned()),
        ("record jar".to_owned(), "Record Jar".to_owned()),
        ("red".to_owned(), "Red".to_owned()),
        ("red/system".to_owned(), "Red".to_owned()),
        ("redcode".to_owned(), "Redcode".to_owned()),
        ("redirect rules".to_owned(), "Redirect Rules".to_owned()),
        ("redirects".to_owned(), "Redirect Rules".to_owned()),
        (
            "regular expression".to_owned(),
            "Regular Expression".to_owned()
        ),
        ("regexp".to_owned(), "Regular Expression".to_owned()),
        ("regex".to_owned(), "Regular Expression".to_owned()),
        ("ren'py".to_owned(), "Ren'Py".to_owned()),
        ("renpy".to_owned(), "Ren'Py".to_owned()),
        ("renderscript".to_owned(), "RenderScript".to_owned()),
        ("rich text format".to_owned(), "Rich Text Format".to_owned()),
        ("ring".to_owned(), "Ring".to_owned()),
        ("riot".to_owned(), "Riot".to_owned()),
        ("robotframework".to_owned(), "RobotFramework".to_owned()),
        ("roff".to_owned(), "Roff".to_owned()),
        ("groff".to_owned(), "Roff".to_owned()),
        ("man".to_owned(), "Roff".to_owned()),
        ("manpage".to_owned(), "Roff".to_owned()),
        ("man page".to_owned(), "Roff".to_owned()),
        ("man-page".to_owned(), "Roff".to_owned()),
        ("mdoc".to_owned(), "Roff".to_owned()),
        ("nroff".to_owned(), "Roff".to_owned()),
        ("troff".to_owned(), "Roff".to_owned()),
        ("roff manpage".to_owned(), "Roff Manpage".to_owned()),
        ("rouge".to_owned(), "Rouge".to_owned()),
        ("ruby".to_owned(), "Ruby".to_owned()),
        ("jruby".to_owned(), "Ruby".to_owned()),
        ("macruby".to_owned(), "Ruby".to_owned()),
        ("rake".to_owned(), "Ruby".to_owned()),
        ("rb".to_owned(), "Ruby".to_owned()),
        ("rbx".to_owned(), "Ruby".to_owned()),
        ("rust".to_owned(), "Rust".to_owned()),
        ("rs".to_owned(), "Rust".to_owned()),
        ("sas".to_owned(), "SAS".to_owned()),
        ("scss".to_owned(), "SCSS".to_owned()),
        ("selinux policy".to_owned(), "SELinux Policy".to_owned()),
        (
            "SELinux Kernel Policy Language".to_owned(),
            "SELinux Policy".to_owned()
        ),
        ("sepolicy".to_owned(), "SELinux Policy".to_owned()),
        ("smt".to_owned(), "SMT".to_owned()),
        ("sparql".to_owned(), "SPARQL".to_owned()),
        ("sqf".to_owned(), "SQF".to_owned()),
        ("sql".to_owned(), "SQL".to_owned()),
        ("sqlpl".to_owned(), "SQLPL".to_owned()),
        ("srecode template".to_owned(), "SRecode Template".to_owned()),
        ("ssh config".to_owned(), "SSH Config".to_owned()),
        ("ston".to_owned(), "STON".to_owned()),
        ("svg".to_owned(), "SVG".to_owned()),
        ("swig".to_owned(), "SWIG".to_owned()),
        ("sage".to_owned(), "Sage".to_owned()),
        ("saltstack".to_owned(), "SaltStack".to_owned()),
        ("saltstate".to_owned(), "SaltStack".to_owned()),
        ("salt".to_owned(), "SaltStack".to_owned()),
        ("sass".to_owned(), "Sass".to_owned()),
        ("scala".to_owned(), "Scala".to_owned()),
        ("scaml".to_owned(), "Scaml".to_owned()),
        ("scheme".to_owned(), "Scheme".to_owned()),
        ("scilab".to_owned(), "Scilab".to_owned()),
        ("self".to_owned(), "Self".to_owned()),
        ("shaderlab".to_owned(), "ShaderLab".to_owned()),
        ("shell".to_owned(), "Shell".to_owned()),
        ("sh".to_owned(), "Shell".to_owned()),
        ("shell-script".to_owned(), "Shell".to_owned()),
        ("bash".to_owned(), "Shell".to_owned()),
        ("zsh".to_owned(), "Shell".to_owned()),
        (
            "shellcheck config".to_owned(),
            "ShellCheck Config".to_owned()
        ),
        ("shellcheckrc".to_owned(), "ShellCheck Config".to_owned()),
        ("shellsession".to_owned(), "ShellSession".to_owned()),
        ("bash session".to_owned(), "ShellSession".to_owned()),
        ("console".to_owned(), "ShellSession".to_owned()),
        ("shen".to_owned(), "Shen".to_owned()),
        ("sieve".to_owned(), "Sieve".to_owned()),
        ("singularity".to_owned(), "Singularity".to_owned()),
        ("slash".to_owned(), "Slash".to_owned()),
        ("slice".to_owned(), "Slice".to_owned()),
        ("slim".to_owned(), "Slim".to_owned()),
        ("smpl".to_owned(), "SmPL".to_owned()),
        ("coccinelle".to_owned(), "SmPL".to_owned()),
        ("smali".to_owned(), "Smali".to_owned()),
        ("smalltalk".to_owned(), "Smalltalk".to_owned()),
        ("squeak".to_owned(), "Smalltalk".to_owned()),
        ("smarty".to_owned(), "Smarty".to_owned()),
        ("solidity".to_owned(), "Solidity".to_owned()),
        ("soong".to_owned(), "Soong".to_owned()),
        ("sourcepawn".to_owned(), "SourcePawn".to_owned()),
        ("sourcemod".to_owned(), "SourcePawn".to_owned()),
        (
            "spline font database".to_owned(),
            "Spline Font Database".to_owned()
        ),
        ("squirrel".to_owned(), "Squirrel".to_owned()),
        ("stan".to_owned(), "Stan".to_owned()),
        ("standard ml".to_owned(), "Standard ML".to_owned()),
        ("sml".to_owned(), "Standard ML".to_owned()),
        ("starlark".to_owned(), "Starlark".to_owned()),
        ("bazel".to_owned(), "Starlark".to_owned()),
        ("bzl".to_owned(), "Starlark".to_owned()),
        ("stata".to_owned(), "Stata".to_owned()),
        ("stringtemplate".to_owned(), "StringTemplate".to_owned()),
        ("stylus".to_owned(), "Stylus".to_owned()),
        ("subrip text".to_owned(), "SubRip Text".to_owned()),
        ("sugarss".to_owned(), "SugarSS".to_owned()),
        ("supercollider".to_owned(), "SuperCollider".to_owned()),
        ("svelte".to_owned(), "Svelte".to_owned()),
        ("swift".to_owned(), "Swift".to_owned()),
        ("systemverilog".to_owned(), "SystemVerilog".to_owned()),
        ("ti program".to_owned(), "TI Program".to_owned()),
        ("tla".to_owned(), "TLA".to_owned()),
        ("toml".to_owned(), "TOML".to_owned()),
        ("tsql".to_owned(), "TSQL".to_owned()),
        ("tsv".to_owned(), "TSV".to_owned()),
        ("tsx".to_owned(), "TSX".to_owned()),
        ("txl".to_owned(), "TXL".to_owned()),
        ("tcl".to_owned(), "Tcl".to_owned()),
        ("tcsh".to_owned(), "Tcsh".to_owned()),
        ("tex".to_owned(), "TeX".to_owned()),
        ("latex".to_owned(), "TeX".to_owned()),
        ("tea".to_owned(), "Tea".to_owned()),
        ("terra".to_owned(), "Terra".to_owned()),
        ("texinfo".to_owned(), "Texinfo".to_owned()),
        ("text".to_owned(), "Text".to_owned()),
        ("fundamental".to_owned(), "Text".to_owned()),
        ("plain text".to_owned(), "Text".to_owned()),
        (
            "textmate properties".to_owned(),
            "TextMate Properties".to_owned()
        ),
        ("tm-properties".to_owned(), "TextMate Properties".to_owned()),
        ("textile".to_owned(), "Textile".to_owned()),
        ("thrift".to_owned(), "Thrift".to_owned()),
        ("turing".to_owned(), "Turing".to_owned()),
        ("turtle".to_owned(), "Turtle".to_owned()),
        ("twig".to_owned(), "Twig".to_owned()),
        ("type language".to_owned(), "Type Language".to_owned()),
        ("tl".to_owned(), "Type Language".to_owned()),
        ("typescript".to_owned(), "TypeScript".to_owned()),
        ("ts".to_owned(), "TypeScript".to_owned()),
        (
            "unified parallel c".to_owned(),
            "Unified Parallel C".to_owned()
        ),
        ("unity3d asset".to_owned(), "Unity3D Asset".to_owned()),
        ("unix assembly".to_owned(), "Unix Assembly".to_owned()),
        ("uno".to_owned(), "Uno".to_owned()),
        ("unrealscript".to_owned(), "UnrealScript".to_owned()),
        ("urweb".to_owned(), "UrWeb".to_owned()),
        ("Ur/Web".to_owned(), "UrWeb".to_owned()),
        ("Ur".to_owned(), "UrWeb".to_owned()),
        ("v".to_owned(), "V".to_owned()),
        ("vlang".to_owned(), "V".to_owned()),
        ("vba".to_owned(), "VBA".to_owned()),
        ("vb6".to_owned(), "VBA".to_owned()),
        ("visual basic 6".to_owned(), "VBA".to_owned()),
        ("visual basic for applications".to_owned(), "VBA".to_owned()),
        ("vbscript".to_owned(), "VBScript".to_owned()),
        ("vcl".to_owned(), "VCL".to_owned()),
        ("vhdl".to_owned(), "VHDL".to_owned()),
        ("vala".to_owned(), "Vala".to_owned()),
        (
            "valve data format".to_owned(),
            "Valve Data Format".to_owned()
        ),
        ("keyvalues".to_owned(), "Valve Data Format".to_owned()),
        ("vdf".to_owned(), "Valve Data Format".to_owned()),
        ("verilog".to_owned(), "Verilog".to_owned()),
        ("vim help file".to_owned(), "Vim Help File".to_owned()),
        ("help".to_owned(), "Vim Help File".to_owned()),
        ("vimhelp".to_owned(), "Vim Help File".to_owned()),
        ("vim script".to_owned(), "Vim Script".to_owned()),
        ("vim".to_owned(), "Vim Script".to_owned()),
        ("viml".to_owned(), "Vim Script".to_owned()),
        ("nvim".to_owned(), "Vim Script".to_owned()),
        ("vim snippet".to_owned(), "Vim Snippet".to_owned()),
        ("SnipMate".to_owned(), "Vim Snippet".to_owned()),
        ("UltiSnip".to_owned(), "Vim Snippet".to_owned()),
        ("UltiSnips".to_owned(), "Vim Snippet".to_owned()),
        ("NeoSnippet".to_owned(), "Vim Snippet".to_owned()),
        (
            "visual basic .net".to_owned(),
            "Visual Basic .NET".to_owned()
        ),
        ("visual basic".to_owned(), "Visual Basic .NET".to_owned()),
        ("vbnet".to_owned(), "Visual Basic .NET".to_owned()),
        ("vb .net".to_owned(), "Visual Basic .NET".to_owned()),
        ("vb.net".to_owned(), "Visual Basic .NET".to_owned()),
        ("volt".to_owned(), "Volt".to_owned()),
        ("vue".to_owned(), "Vue".to_owned()),
        (
            "wavefront material".to_owned(),
            "Wavefront Material".to_owned()
        ),
        ("wavefront object".to_owned(), "Wavefront Object".to_owned()),
        (
            "web ontology language".to_owned(),
            "Web Ontology Language".to_owned()
        ),
        ("webassembly".to_owned(), "WebAssembly".to_owned()),
        ("wast".to_owned(), "WebAssembly".to_owned()),
        ("wasm".to_owned(), "WebAssembly".to_owned()),
        ("webidl".to_owned(), "WebIDL".to_owned()),
        ("webvtt".to_owned(), "WebVTT".to_owned()),
        ("wget config".to_owned(), "Wget Config".to_owned()),
        ("wgetrc".to_owned(), "Wget Config".to_owned()),
        ("wikitext".to_owned(), "Wikitext".to_owned()),
        ("mediawiki".to_owned(), "Wikitext".to_owned()),
        ("wiki".to_owned(), "Wikitext".to_owned()),
        (
            "windows registry entries".to_owned(),
            "Windows Registry Entries".to_owned()
        ),
        ("wollok".to_owned(), "Wollok".to_owned()),
        (
            "world of warcraft addon data".to_owned(),
            "World of Warcraft Addon Data".to_owned()
        ),
        ("x bitmap".to_owned(), "X BitMap".to_owned()),
        ("xbm".to_owned(), "X BitMap".to_owned()),
        (
            "x font directory index".to_owned(),
            "X Font Directory Index".to_owned()
        ),
        ("x pixmap".to_owned(), "X PixMap".to_owned()),
        ("xpm".to_owned(), "X PixMap".to_owned()),
        ("x10".to_owned(), "X10".to_owned()),
        ("xten".to_owned(), "X10".to_owned()),
        ("xc".to_owned(), "XC".to_owned()),
        ("xcompose".to_owned(), "XCompose".to_owned()),
        ("xml".to_owned(), "XML".to_owned()),
        ("rss".to_owned(), "XML".to_owned()),
        ("xsd".to_owned(), "XML".to_owned()),
        ("wsdl".to_owned(), "XML".to_owned()),
        (
            "xml property list".to_owned(),
            "XML Property List".to_owned()
        ),
        ("xpages".to_owned(), "XPages".to_owned()),
        ("xproc".to_owned(), "XProc".to_owned()),
        ("xquery".to_owned(), "XQuery".to_owned()),
        ("xs".to_owned(), "XS".to_owned()),
        ("xslt".to_owned(), "XSLT".to_owned()),
        ("xsl".to_owned(), "XSLT".to_owned()),
        ("xojo".to_owned(), "Xojo".to_owned()),
        ("xonsh".to_owned(), "Xonsh".to_owned()),
        ("xtend".to_owned(), "Xtend".to_owned()),
        ("yaml".to_owned(), "YAML".to_owned()),
        ("yml".to_owned(), "YAML".to_owned()),
        ("yang".to_owned(), "YANG".to_owned()),
        ("yara".to_owned(), "YARA".to_owned()),
        ("yasnippet".to_owned(), "YASnippet".to_owned()),
        ("snippet".to_owned(), "YASnippet".to_owned()),
        ("yas".to_owned(), "YASnippet".to_owned()),
        ("yacc".to_owned(), "Yacc".to_owned()),
        ("zap".to_owned(), "ZAP".to_owned()),
        ("zil".to_owned(), "ZIL".to_owned()),
        ("zeek".to_owned(), "Zeek".to_owned()),
        ("bro".to_owned(), "Zeek".to_owned()),
        ("zenscript".to_owned(), "ZenScript".to_owned()),
        ("zephir".to_owned(), "Zephir".to_owned()),
        ("zig".to_owned(), "Zig".to_owned()),
        ("zimpl".to_owned(), "Zimpl".to_owned()),
        ("curl config".to_owned(), "cURL Config".to_owned()),
        ("curlrc".to_owned(), "cURL Config".to_owned()),
        ("ec".to_owned(), "eC".to_owned()),
        ("mirc script".to_owned(), "mIRC Script".to_owned()),
        ("nesc".to_owned(), "nesC".to_owned()),
        ("restructuredtext".to_owned(), "reStructuredText".to_owned()),
        ("rst".to_owned(), "reStructuredText".to_owned()),
        ("robots".to_owned(), "robots.txt".to_owned()),
        ("robots txt".to_owned(), "robots.txt".to_owned()),
        ("xbase".to_owned(), "xBase".to_owned()),
        ("advpl".to_owned(), "xBase".to_owned()),
        ("clipper".to_owned(), "xBase".to_owned()),
        ("foxpro".to_owned(), "xBase".to_owned()),
    ]
    .iter()
    .cloned()
    .collect();
}
